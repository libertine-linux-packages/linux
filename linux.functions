# This file is part of libertine linux's package linux. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/linux/master/COPYRIGHT. No part of libertine linux's package linux, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package linux. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/linux/master/COPYRIGHT.


case "$package" in
	
	build_musl_cross_make_linux)
		
		variant=empty
		
		copy_subset="$variant"
		
		libertine_compile_build_musl_cross_make_linux()
		{
			:
		}
		
	;;
	
	linux_prep|linux)
	
		variant=upstream
		
		depends build_gnumake
		build_needs make

		depends build_ccache
		build_needs ccache
		
		depends build_bash
		build_needs bash
		
		depends build_netbsd_src_patch
		build_needs patch
		
		depends build_perl
		build_needs perl
		
		depends build_musl_cross_make_build
		build_needs "$libertine_build"-cpp "$libertine_build"-cc "$libertine_build"-gcc "$libertine_build"-c++ "$libertine_build"-g++ "$libertine_build"-ar "$libertine_build"-ld "$libertine_build"-ranlib
		
		depends build_musl_cross_make_host
		build_needs "$libertine_host"-cpp "$libertine_host"-cc "$libertine_host"-gcc "$libertine_host"-ar "$libertine_host"-ld "$libertine_host"-ranlib "$libertine_host"-strip "$libertine_host"-nm "$libertine_host"-objcopy "$libertine_host"-objdump
		
		depends build_bc
		build_needs bc
		
		depends build_busybox
		build_needs cmp tail bzip2 od cut touch xargs echo sort uniq mktemp dirname basename install sed gzip date head fgrep readlink expr wc uname seq
		# seq is needed by grsecurity's generate_size_overflow_hash.sh

		# Needs the 'full' xz, not BusyBox's
		depends build_xz_utils_xz
		build_needs xz
		
		depends build_libressl
		depends build_zlib
				
		# SPL / ZFS
		if core_variable_isUnset linux_prep_enableZfs; then
			linux_prep_enableZfs='true'
		fi
		if $linux_prep_enableZfs; then
			depends zlib libuuid libtirpc libblkid
		fi
		
		depends build_slibtool
		build_needs clibtool-static libtoolize
		
		build_needs autoreconf autoconf autoheader automake aclocal expr autom4te m4 install sort ls sleep

		_libertine_compile_linux_menuconfigAdjustments()
		{
			local configFilePath="$1"
			local initramFsGenerateFilePath="$2"
	
			libertine_public_menuconfig_adjust CONFIG_INITRAMFS_SOURCE "$initramFsGenerateFilePath" true "$configFilePath"
		}

		build_needs sed
		_libertine_compile_linux_make()
		{
			local makeFolderPath="$1"
			shift 1
	
			pushd "$makeFolderPath"
	
				libertine_public_make \
					V=2 \
					ARCH="$libertine_hostLinuxSpecific" \
					KBUILD_BUILD_TIMESTAMP="Thu Jun 16 09:22:17 UTC 2016" \
					KBUILD_BUILD_USER='libertine' \
					KBUILD_BUILD_HOST='libertine' \
					CROSS_COMPILE="$libertine_host"- \
					HOSTCFLAGS="-Wall -Wmissing-prototypes -Wstrict-prototypes -O0 -fomit-frame-pointer -std=gnu89 -I$(libertine_public_outputBuildSysrootPath build_zlib)/usr/include -L$(libertine_public_outputBuildSysrootPath build_zlib)/usr/lib -I$(libertine_public_outputBuildSysrootPath build_libressl)/usr/include -L$(libertine_public_outputBuildSysrootPath build_libressl)/usr/lib -lz" \
					"$@"
		
			popd
		}
	;;
	
esac

case "$package" in
		
	linux_prep)
				
		build_needs rm ln
		libertine_compile_linux_prep()
		{
			# Apply patches
			"$(libertine_public_packagePath)"/linux-patches/apply-patches "$(libertine_public_sourcePath)"
			
			local configFilePath="$(libertine_public_sourcePath)"/.config
			
			printf '' >"$(libertine_public_outputInitramfsContentsFilePath)"
			_libertine_compile_linux_menuconfigAdjustments "$configFilePath" "$(libertine_public_outputInitramfsContentsFilePath)"
			
			_libertine_compile_linux_prep_menuconfigAlterationsBeforeNonKernelSuppliedModules "$configFilePath"
						
			# Fix-up grecurity plugin compilation for cross-compiling
			_libertine_compile_linux_prep_fixGrsecurityGccPluginsForCrossCompilation
			
			# Linux's Makefile and other tools assume /bin/bash
			_libertine_compile_linux_prep_fixHardcodedBashReferencesInMakefileAndElsewhere "$(libertine_public_sourcePath)"
			
			# Linux's Makefile hardcodes gcc and g++ rather than cc and c++
			_libertine_compile_linux_prep_fixHardcodedGccReferencesInMakefile
			
			# grsecurity relies on include/generated/autoconf.h. Running this make task should create it
			_libertine_compile_linux_make "$(libertine_public_sourcePath)" silentoldconfig
			
			# Prepare for, and then build, extra modules
			_libertine_compile_linux_make "$(libertine_public_sourcePath)" prepare scripts
			
			if $linux_prep_enableZfs; then
				_libertine_compile_linux_prep_nonKernelSuppliedModule_buildSplAndZfs
			fi
			
			_libertine_compile_linux_make "$(libertine_public_sourcePath)"
	
			rm -rf "$(libertine_public_outputMiscPath)"
			ln -s copy/"$variant" "$(libertine_public_outputMiscPath)"
		}
		
		_libertine_compile_linux_prep_nonKernelSuppliedModule_buildSplAndZfs()
		{
			printf '\n\n\nZFS does not compile with grsec currently (Jan 20 2017)\n\n\n' 1>&2
			return 0
			
			# We do this as SPL and ZFS both look for a hardcoded 'cpp'
			libertine_public_addOrReplaceBinaryInPath cpp "$libertine_build"-cpp

			_libertine_compile_linux_prep_nonKernelSuppliedModule_spl

			_libertine_compile_linux_prep_nonKernelSuppliedModule_zfs

			_libertine_compile_linux_prep_menuconfigAlterationsForZfsAfterNonKernelSuppliedModules "$configFilePath"
		}

		build_needs find xargs sed
		_libertine_compile_linux_prep_fixHardcodedBashReferencesInMakefileAndElsewhere()
		{
			local path="$1"
			
			local buildBashPath="$(libertine_public_buildNeedsPath)"/bash
			
			libertine_public_adjustShaBangAllFilesInPathEvenIfNotFirstLine "$path"
			
			find "$path" -type f -name 'Makefile*' | xargs sed -i 's;/bin/bash;'"$buildBashPath"';g'
		}

		build_needs id
		_libertine_compile_linux_prep_menuconfigAlterationsBeforeNonKernelSuppliedModules()
		{
			local configFilePath="$1"
	
			libertine_public_menuconfig_adjust CONFIG_CROSS_COMPILE "$libertine_host"- true "$configFilePath"
			libertine_public_menuconfig_adjust CONFIG_INITRAMFS_ROOT_UID "$(id -u)" false "$configFilePath"
			libertine_public_menuconfig_adjust CONFIG_INITRAMFS_ROOT_GID "$(id -g)" false "$configFilePath"
		}
		
		build_needs sed cat
		_libertine_compile_linux_prep_fixGrsecurityGccPluginsForCrossCompilation()
		{
			# Note this does not fix the problem that system.h (in plugin/include) requires gmp.h or libiberty.h creating a conflicting basename because gcc's auto-host.h is incorrectly generated
			cat <<-'EOF' >"$(libertine_public_sourcePath)"/scripts/gcc-plugin.sh
				echo "$3"
			EOF
			
			# This is just plain weird - GCC Plugins needs gmp but use the plugin includes of the target.
			# Add -I, -L for gmp, mpc and mpfr
			local buildFolderPath="$(libertine_public_packagePath build_musl_cross_make_build)"/upstream/build
			local objToolchainFolderPath="$buildFolderPath"/obj_toolchain

			local gmpIncludePath="$objToolchainFolderPath"/gmp
			local gmpLibraryPath="$objToolchainFolderPath"/gmp/.libs
			
			local mpcIncludePath="$buildFolderPath"/src_mpc/src
			local mpcLibraryPath="$objToolchainFolderPath"/.libs
			
			local mpfrIncludePath="$buildFolderPath"/src_mpfr/src
			local mpfrLibraryPath="$objToolchainFolderPath"/mpfr/src/.libs
			
			sed -i \
				-e 's,HOST_EXTRACXXFLAGS +=,HOST_EXTRACXXFLAGS += -I'"$gmpIncludePath"' -L'"$gmpLibraryPath"' -I'"$mpcIncludePath"' -L'"$mpcLibraryPath"' -I'"$mpfrIncludePath"' -L'"$mpfrLibraryPath"',g' \
				"$(libertine_public_sourcePath)"/tools/gcc/Makefile
			
			sed -i \
				-e 's/-shared/-shared -static-libstdc++/g' \
				"$(libertine_public_sourcePath)"/scripts/Makefile.host
		}

		build_needs sed
		_libertine_compile_linux_prep_fixHardcodedGccReferencesInMakefile()
		{
			# (1) HOSTCC is hardcoded to gcc
			# (2) HOSTCXX is hardcoded to g++
			# (3) CC is hardcoded to $(CROSS_COMPILE)gcc
			sed -i \
				-e 's/^HOSTCC[[:space:]]*= gcc/HOSTCC = '"${libertine_build}"'-cc/g' \
				-e 's/^HOSTCXX[[:space:]]*= g++/HOSTCXX = '"${libertine_build}"'-c++/g' \
				-e 's/$(CROSS_COMPILE)gcc/$(CROSS_COMPILE)cc/g' \
				"$(libertine_public_sourcePath)"/Makefile
		}

		build_needs sed
		_libertine_compile_linux_prep_nonKernelSuppliedModule_fixesForThingsThatAssumeGnuCoreutilsAndNotBusyBox()
		{
			# Not an exact match, but good enough
			sed -i -e 's/--canonicalize-existing/-f/g' copy-builtin
			
			# Naive
			sed -i -e 's/--recursive/-r/g' copy-builtin
		}
		
		build_needs sed rm cp
		_libertine_compile_linux_prep_nonKernelSuppliedModule_spl()
		{
			pushd "$(libertine_public_packagePath)"/spl_upstream
				
				_libertine_compile_linux_prep_nonKernelSuppliedModule_fixesForThingsThatAssumeGnuCoreutilsAndNotBusyBox
				
				_libertine_compile_linux_prep_fixHardcodedBashReferencesInMakefileAndElsewhere "$(libertine_public_packagePath)"/spl_upstream
				
				# Remove stuff that (a) requires fixes and (b) slows down the build
				local tab=$"\t"
				sed -i -e 's/SUBDIRS = include rpm/SUBDIRS = include/g' -e "s/SUBDIRS += lib cmd man scripts/SUBDIRS += lib scripts/g" -e "/rpm.am/d" -e "/deb.am/d" -e "/tgz.am/d" Makefile.am
				sed -i -e "/${tab}cmd/d" -e "/${tab}man/d" -e "/${tab}rpm/d" configure.ac
				
				sed -i -e 's/AC_PROG_LIBTOOL/LT_INIT/g' configure.ac
				libtoolize --install --force --verbose
				cp -a -f -H m4/. config/
				autoreconf --install --force --verbose || true
				rm -Rf autom4te.cache
				cp -a -f -H build-aux/. config/
				
				libertine_public_autoconf_removeCFlags='-ffunction-sections -fdata-sections -Wl,--gc-sections' libertine_public_autoconf_modernAutoconfConfigure \
					--disable-debug-kmem \
					--disable-debug-kmem-tracking \
					--enable-linux-builtin=yes \
					--with-linux="$(libertine_public_sourcePath)" \
					--with-linux-obj="$(libertine_public_sourcePath)"
				
				#typedef ulong_t				pfn_t;
				sed -i -e '/typedef.*pfn_t;/d' include/sys/types.h
				
				# Requires bash. No really.
				bash ./copy-builtin "$(libertine_public_sourcePath)"
				
				libertine_public_make
		
				libertine_public_make DESTDIR="$(libertine_public_outputHostSysrootPath)" install
		
			popd
		}
		
		build_needs sed truncate mktemp dd
		_libertine_compile_linux_prep_nonKernelSuppliedModule_zfs()
		{
			libertine_public_populateInputSysroot zlib libuuid libtirpc libblkid
	
			pushd "$(libertine_public_packagePath)"/zfs_upstream
			
				_libertine_compile_linux_prep_nonKernelSuppliedModule_fixesForThingsThatAssumeGnuCoreutilsAndNotBusyBox
				
				_libertine_compile_linux_prep_fixHardcodedBashReferencesInMakefileAndElsewhere "$(libertine_public_packagePath)"/zfs_upstream
			
				# Remove stuff that (a) requires even more build binaries and (b) slows down the build
				local tab=$"\t"
				sed -i -e "s/SUBDIRS += udev etc man scripts tests lib cmd contrib/SUBDIRS += scripts lib cmd/g" -e "/rpm.am/d" -e "/deb.am/d" -e "/tgz.am/d" Makefile.am
				sed -i -e "/${tab}udev/d" -e "/${tab}etc/d" -e "/${tab}man/d" -e "/${tab}contrib/d" -e "/${tab}tests/d" -e "/${tab}rpm/d" configure.ac
				
				sed -i -e 's/AC_PROG_LIBTOOL/LT_INIT/g' configure.ac
				libtoolize --install --force --verbose
				cp -a -f -H m4/. config/
				autoreconf --install --force --verbose || true
				rm -Rf autom4te.cache
				cp -a -f -H build-aux/. config/
				
				libertine_public_autoconf_removeCFlags='-ffunction-sections -fdata-sections -Wl,--gc-sections -fno-common' libertine_public_autoconf_modernAutoconfConfigure \
					--disable-debug-dmu-tx \
				    --enable-linux-builtin=yes \
				    --with-linux="$(libertine_public_sourcePath)" \
				    --with-linux-obj="$(libertine_public_sourcePath)" \
				    --with-spl="$(libertine_public_packagePath)"/spl_upstream \
				    --with-spl-obj="$(libertine_public_packagePath)"/spl_upstream \
					--enable-sysvinit \
					--with-mounthelperdir=/usr/sbin \
					--with-blkid=yes
				
				# zed_log uses read, close, pipe, getpid and relies on glibc header behaviour
				sed -i -e 's/#include "zed_log.h"/#include <unistd.h>\n#include "zed_log.h"/g' cmd/zed/zed_log.c
				
				# Requires bash. No really.
				bash ./copy-builtin "$(libertine_public_sourcePath)"
		
				libertine_public_make
		
				libertine_public_make DESTDIR="$(libertine_public_outputHostSysrootPath)" install
	
			popd
			
			libertine_public_installAndStripBinariesIn sbin mount.zfs zdb zed zfs zhack zinject zpios zpool zstreamdump ztest
		}

		_libertine_compile_linux_prep_menuconfigAlterationsForZfsAfterNonKernelSuppliedModules()
		{
			libertine_public_menuconfig_adjust CONFIG_SPL y false "$configFilePath"
			libertine_public_menuconfig_adjust CONFIG_ZFS y false "$configFilePath"
		}
	;;
	
	linux)
		
		copy_subset="empty"
		
		depends linux_prep
		
		depends build_rsync
		build_needs rsync
		
		libertine_compile_linux()
		{
			local inputPath="$(libertine_public_inputMakePath)"
			local initramfsContentsFolderPath="$inputPath"/initramfs
			local outputInitramFsGenerateFilePath="$inputPath"/initramfs.contents
			
			_libertine_compile_linux_copyLinuxPrepOutputAndRemoveUnwantedInitramfsStuff
			
			_libertine_compile_linux_menuconfigAdjustments "$inputPath"/.config "$outputInitramFsGenerateFilePath"
			_libertine_compile_linux_menuconfigAlterationsForCmdline "$inputPath"/.config
			
			_libertine_compile_linux_initramfs_installMachineFilesystemAsIfItWereOurOwn
			_libertine_compile_linux_initramfs_createCpioArchiveInputFile "$outputInitramFsGenerateFilePath"
			
			_libertine_compile_linux_make "$inputPath"
			
			_libertine_compile_linux_replaceInstallShForIncreasedReproducibility
			
			_libertine_compile_linux_make "$inputPath" INSTALL_PATH="$(libertine_public_outputMiscPath)" install
		}
		
		build_needs mkdir rm
		_libertine_compile_linux_copyLinuxPrepOutputAndRemoveUnwantedInitramfsStuff()
		{
			mkdir -m 0755 -p "$inputPath"
			libertine_public_copy "$(libertine_public_outputMiscPath linux_prep)"/. "$(libertine_public_inputMakePath)"/
			
			# Remove linux_prep inputs which aren't wanted, so make will rebuild
			set +f
				# Usually, the file is initramfs_data.cpio.gz
				rm -rf "$inputPath"/usr/initramfs_data.cpio* "$inputPath"/usr/initramfs_data.o "$inputPath"/usr/built-in.o
			set -f

			rm -rf "$initramfsContentsFolderPath"
			mkdir -m 0755 -p "$initramfsContentsFolderPath"
			
			rm -rf "$outputInitramFsGenerateFilePath"
		}
		
		build_needs head
		_libertine_compile_linux_menuconfigAlterationsForCmdline()
		{
			local configFilePath="$1"
						
			# Iterate over packages, finding the value of any command-line settings
			local actualCommandLine=''
			_libertine_compile_linux_menuconfigAlterationsForCmdline_processPackageCommandLine()
			{
				local dependentPackage="$core_variable_array_element"
			
				local kernelBootCommandLineFilePath="$(libertine_public_outputKernelBootCommandLineFilePath "$dependentPackage")"

				if [ ! -s "$kernelBootCommandLineFilePath" ]; then
					return 0
				fi
				
				local value="$(head -n 1 "$kernelBootCommandLineFilePath")"
				if [ -z "$value" ]; then
					return 0
				fi
				
				if [ -z "$actualCommandLine" ]; then
					actualCommandLine="$value"
				else
					actualCommandLine="$actualCommandLine $value"
				fi
			}
			core_variable_array_iterate _libertine_compile_built _libertine_compile_linux_menuconfigAlterationsForCmdline_processPackageCommandLine
			
			if core_variable_isUnsetOrEmpty linux_postpendToBuiltInCommandLine; then
				:
			elif [ -z "$actualCommandLine" ]; then
				actualCommandLine="$linux_postpendToBuiltInCommandLine"
			else
				actualCommandLine="$actualCommandLine $linux_postpendToBuiltInCommandLine"
			fi
			
			if core_variable_isUnset linux_forceUseOfBuiltInCommandLine; then
				linux_forceUseOfBuiltInCommandLine='false'
			fi

			if [ -n "$actualCommandLine" ]; then
				libertine_public_menuconfig_adjust CONFIG_CMDLINE_BOOL y false "$configFilePath"
				libertine_public_menuconfig_adjust CONFIG_CMDLINE "$actualCommandLine" true "$configFilePath"
				if $linux_forceUseOfBuiltInCommandLine; then
					libertine_public_menuconfig_adjust CONFIG_CMDLINE_OVERRIDE y false "$configFilePath"
				else
					libertine_public_menuconfig_unset CONFIG_CMDLINE_OVERRIDE "$configFilePath"
				fi
			else
				if $linux_forceUseOfBuiltInCommandLine; then
					libertine_public_menuconfig_adjust CONFIG_CMDLINE_BOOL y false "$configFilePath"
					libertine_public_menuconfig_adjust CONFIG_CMDLINE '' true "$configFilePath"
					libertine_public_menuconfig_adjust CONFIG_CMDLINE_OVERRIDE y false "$configFilePath"
				fi
			fi
		}
		
		_libertine_compile_linux_initramfs_installMachineFilesystemAsIfItWereOurOwn()
		{
			if [ -d "$libertine_machineSettingsFolderPath"/initramfs ]; then
				libertine_public_copy_filesystem "$libertine_machineSettingsFolderPath"/initramfs/ "$(libertine_public_outputInitramfsPath)"/
			fi
			local contentsFilePath="$libertine_machineSettingsFolderPath"/initramfs.contents
			if [ -f "$contentsFilePath" ]; then
				cp -f "$contentsFilePath" "$(libertine_public_outputInitramfsContentsFilePath)"
			fi
		}
		
		build_needs rm mkdir tac sort find grep cat
		_libertine_compile_linux_initramfs_createCpioArchiveInputFile()
		{
			{
				core_variable_array_iterate _libertine_compile_built _libertine_compile_linux_initramfs_combineInitramfsSysrootContents
				
				# And ourselves (ie machine filesystem)
				core_variable_array_element='linux' _libertine_compile_linux_initramfs_combineInitramfsSysrootContents
			} | tac | sort -t ' ' -k 2  >"$outputInitramFsGenerateFilePath".duplicates
			
			{
				local previousPath=''
				local kind
				local path
				local remainder
				
				while IFS=' ' read -r kind path remainder
				do
					if [ "$path" = "$previousPath" ]; then
						prinf '%s\n' "WARNING: Path '$path' is duplicated"
						continue
					fi
					
					printf '%s %s %s\n' "$kind" "$path" "$remainder"
					previousPath="$path"
				
				done <"$outputInitramFsGenerateFilePath".duplicates
			} >"$outputInitramFsGenerateFilePath".directories-may-not-be-first.overrides
			
			{
				pushd "$initramfsContentsFolderPath"
			
					# Setting IFS to . allows us to strip a leading '.' from paths from find
					# Using -mindepth 1 eliminates './'
					local empty
					local path
					find . -mindepth 1 -depth | while IFS='.' read -r empty path
					do
						if ! grep -q -F ' '"$path"' ' "$outputInitramFsGenerateFilePath".directories-may-not-be-first.overrides; then
							local fileEtcPath=."$path"
							
							if [ -L "$fileEtcPath" ]; then
								printf 'slink %s %s %s 0 0\n' "$path" "$(_libertine_compile_linux_initramfs_symbolicLinkValue "$fileEtcPath")" "$(_libertine_compile_linux_initramfs_octalMode "$fileEtcPath")"
							elif [ -f "$fileEtcPath" ]; then
								printf 'file %s %s %s 0 0\n' "$path" initramfs"${path}" "$(_libertine_compile_linux_initramfs_octalMode "$fileEtcPath")"
							elif [ -d "$fileEtcPath" ]; then
								printf 'dir %s %s 0 0\n' "$path" "$(_libertine_compile_linux_initramfs_octalMode "$fileEtcPath")"
							elif [ -b "$fileEtcPath" ]; then
								printf 'nod %s %s 0 0 b %s\n' "$path" "$(_libertine_compile_linux_initramfs_octalMode "$fileEtcPath")" "$(_libertine_compile_linux_initramfs_deviceMajorAndMinor "$fileEtcPath")"
							elif [ -c "$fileEtcPath" ]; then
								printf 'nod %s %s 0 0 c %s\n' "$path" "$(_libertine_compile_linux_initramfs_octalMode "$fileEtcPath")" "$(_libertine_compile_linux_initramfs_deviceMajorAndMinor "$fileEtcPath")"
							elif [ -p "$fileEtcPath" ]; then
								printf 'pipe %s %s 0 0\n' "$path" "$(_libertine_compile_linux_initramfs_octalMode "$fileEtcPath")"
							elif [ -S "$fileEtcPath" ]; then
								core_exitError $core_commandLine_exitCode_CONFIG "Sockets are not acceptable in a rootfs ram disk"
							else
								core_exitError $core_commandLine_exitCode_UNAVAILABLE "What is ${fileEtcPath}?"
							fi
						fi
					done
					
				popd
			} >"$outputInitramFsGenerateFilePath".directories-may-not-be-first.remainder
			
			# sort so 'dir' are first
			cat "$outputInitramFsGenerateFilePath".directories-may-not-be-first.overrides "$outputInitramFsGenerateFilePath".directories-may-not-be-first.remainder | sort >"$outputInitramFsGenerateFilePath"
		}

		build_needs sed rsync
		_libertine_compile_linux_initramfs_combineInitramfsSysrootContents()
		{
			local dependentPackage="$core_variable_array_element"
			
			sed \
				-e '/^$/d' \
				-e '/^#/d' \
				-e '/^[a-z]* \/etc\/combine.d /d' \
				-e '/^[a-z]* \/etc\/combine.d\/ /d' \
				-e '/^[a-z]* \/etc\/combine.d\/.*/d' \
				"$(libertine_public_outputInitramfsContentsFilePath "$dependentPackage")"
			
			printf '\n\nADDING PACKAGE TO CPIO: %s\n' "$dependentPackage" 1>&2
			rsync --archive --itemize-changes --outbuf=Line "$(libertine_public_outputInitramfsPath "$dependentPackage")"/ "$initramfsContentsFolderPath"/ 1>&2
		}
		
		build_needs rm
		_libertine_compile_linux_initramfs_combineSnippetsAndRemoveFromInitramfs()
		{
			local combineFilePath
			set +f
			for combineFilePath in "$initramfsContentsFolderPath"/etc/combine.d/*.combine
			do
				set -f
				if [ ! -f "$combineFilePath" ]; then
					continue
				fi
		
				if [ ! -s "$combineFilePath" ]; then
					continue
				fi
		
				local folderPath fileName permissions mergeStrategy
				while IFS=' ' read -r folderPath fileName permissions mergeStrategy
				do
	
					local combinedFolderPath="$parentFolderPath"/"$fileName".d
					local deleteWhenFinished=true
					case "$mergeStrategy" in
		
						nocombine)
							_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategy_nocombine
							deleteWhenFinished=false
						;;
		
						group)
							_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategy_group
						;;
		
						passwd)
							_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost _libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_passwd
						;;
		
						shadow)
							_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost _libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_shadow
						;;
		
						default)
							_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost _libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_default
						;;
		
						hasfiles)
							_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost _libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_hasfiles
						;;
		
						nosort)
							_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost _libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_nosort
						;;
		
						*)
							core_exitError 1 "Unknown mergeStrategy '$mergeStrategy' for $combinedFolderPath"
						;;
		
					esac
					
					if $deleteWhenFinished; then
						rm -rf "$combinedFolderPath"
					fi
					
				done <"$combineFilePath"
				
			done
			set -f
			
			rm -rf "$initramfsContentsFolderPath"/etc/combine.d
		}
		
		build_needs chmod
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategy_nocombine()
		{
			local individualFilePath
			set +f
			for individualFilePath in "$combinedFolderPath"/*."$fileName"
			do
				set -f
				
				if [ ! -f "$individualFilePath" ]; then
					continue
				fi
	
				chmod "$permissions" "$individualFilePath"
			done
			set -f
		}
		
		build_needs chmod head sort cp
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategy_group()
		{
			local combinedFilePath="$parentFolderPath"/"$fileName"
			
			local TMP_FILE
			core_temporaryFiles_newFileToRemoveOnExit
			local temporaryFilePath="$TMP_FILE"
	
			printf '' >"$temporaryFilePath"
	
			local groupFilePath
			set +f
			for groupFilePath in "$combinedFolderPath"/*."$fileName".d
			do
				set -f
				if [ ! -f "$groupFilePath" ]; then
					continue
				fi
				if [ ! -s "$groupFilePath" ]; then
					continue
				fi
		
				local groupWithoutExtensionPath="${groupFilePath%*.${fileName}.d}"
				local groupName="${groupWithoutExtensionPath##*/}"
		
				local groupIdFilePath="$groupFilePath"/id
		
				if [ ! -f "$groupIdFilePath" ]; then
					continue
				fi
				if [ ! -s "$groupIdFilePath" ]; then
					continue
				fi
				local groupId="$(head -n 1 "$groupIdFilePath")"
						
				local users=''
				local userFilePath
				set +f
				for userFilePath in "$groupFilePath".d/*.user
				do
					set -f
					if [ ! -f "$userFilePath" ]; then
						continue
					fi
					if [ ! -s "$userFilePath" ]; then
						continue
					fi
		
					local userWithoutExtensionPath="${userFilePath%*.user}"
					local userName="${userWithoutExtensionPathh##*/}"
			
					if [ -n "$users" ]; then
						users="${users},"
					fi
					users="${users}${userName}"
				done
				set -f
		
				printf '%s:x:%s:%s\n' "$groupName" "$groupId" "$users" >>"$temporaryFilePath"
			done

			# Create file
			sort -u -t : -k 3 "$temporaryFilePath" >"$combinedFilePath"
	
			# Create backup file
			local backupFilePath="$combinedFilePath"-
			cp -f "$combinedFilePath" "$backupFilePath"
			chmod "$permissions" "$backupFilePath"
	
			# Finish
			chmod "$permissions" "$combinedFilePath"
		}
		
		build_needs sort cp chmod
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_passwd()
		{
			# Create file
			sort -u -t : -k 3 "$temporaryFilePath" >"$combinedFilePath"
	
			# Create backup file
			local backupFilePath="$combinedFilePath"-
			cp -f "$combinedFilePath" "$backupFilePath"
			chmod "$permissions" "$backupFilePath"
		}
		
		build_needs sort cp chmod
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_shadow()
		{
			# Create file
			sort -u "$temporaryFilePath" >"$combinedFilePath"
	
			# Create backup file
			local backupFilePath="$combinedFilePath"-
			cp -f "$combinedFilePath" "$backupFilePath"
			chmod "$permissions" "$backupFilePath"
		}
		
		build_needs sort
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_default()
		{
			# We should really normalise whitespace and merge lines before doing this
			# Hard task to merge IPv6 lines as they have multiple naming choices
			sort -u "$temporaryFilePath" >"$combinedFilePath"
		}
		
		build_needs sort
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_hasfiles()
		{
			if $hasFiles; then
				sort -u "$temporaryFilePath" >"$combinedFilePath"
			fi
		}

		build_needs cp
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost_action_nosort()
		{
			cp "$temporaryFilePath" "$combinedFilePath"
		}
		
		build_needs chmod sed
		_libertine_compile_linuex_initramfs_combineSnippetsAndRemoveFromInitramfsmergeStrategyForMost()
		{
			local actionToTake="$1"
	
			local combinedFilePath="$parentFolderPath"/"$fileName"
			
			local TMP_FILE
			core_temporaryFiles_newFileToRemoveOnExit
			local temporaryFilePath="$TMP_FILE"
	
			printf '' >"$temporaryFilePath"
			chmod "$permissions" "$temporaryFilePath"
	
			local hasFiles=false
			local individualFilePath
			set +f
			for individualFilePath in "$combinedFolderPath"/*."$fileName"
			do
				set -f
				if [ ! -f "$individualFilePath" ]; then
					continue
				fi
		
				chmod "$permissions" "$individualFilePath"
		
				# Remove comments and empty lines and append to a temporary file
				sed -e '/^#/d' -e '/^$/d' "$individualFilePath" >>"$temporaryFilePath"
				hasFiles=true
			done
			set -f
	
			$actionToTake

			chmod "$permissions" "$combinedFilePath"
		}
		
		build_needs readlink
		_libertine_compile_linux_initramfs_symbolicLinkValue()
		{
			local path="$1"
			
			readlink "$path"
		}

		build_needs stat
		_libertine_compile_linux_initramfs_octalMode()
		{
			local path="$1"
	
			if [ -L "$path" ]; then
				printf '0755'
				return 0
			fi
	
			local octalMode="$(stat -c '%a' "$path")"
			if [ ${#octalMode} -eq 3 ]; then
				octalMode='0'"${octalMode}"
			fi
	
			printf '%s' "$octalMode"
		}

		build_needs stat
		_libertine_compile_linux_initramfs_deviceMajorAndMinor()
		{
			local path="$1"
			
			stat -c '%T %t' "$path"
		}
		
		build_needs cat chmod env sh cp
		_libertine_compile_linux_replaceInstallShForIncreasedReproducibility()
		{
			local fileToChange="$inputPath"/arch/"$libertine_buildLinux"/boot/install.sh
			local envShaBang="$(libertine_public_buildNeedsPath)"/env
			{
				printf '%s\n' "$envShaBang"
				cat <<-'EOF'
					main()
					{
						local kernelVersion="$1"
						local kernelImageFile="$2"
						local kernelMapFile="$3"
						local defaultInstallPathOrBlankIfRootDirectory="$4"
						
						cp "$kernelImageFile" "$defaultInstallPathOrBlankIfRootDirectory"/vmlinuz
						cp "$kernelMapFile" "$defaultInstallPathOrBlankIfRootDirectory"/System.map
						printf '%s' "$kernelVersion" >"$defaultInstallPathOrBlankIfRootDirectory"/version
					}
					
					main "$@"
				EOF
				
			} >"$fileToChange"
			
			chmod +x "$fileToChange"
		}
		
	;;
	
esac
